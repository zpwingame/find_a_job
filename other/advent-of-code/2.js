// 新聚焦的抛物面反射器将收集到的所有光线发送到另一座山的侧面 - 熔岩岛上最大的山。当你接近这座山时，你发现光线被嵌入山腰的一个大型设施的墙壁所收集。

// 你在一个写着"熔岩生产设施"的大标志下找到一扇门，旁边还有一个小标志写着"危险 - 此处需要个人防护装备"。

// 当你走进去时，立即被一只戴着护目镜和松松垮垮的安全帽的驯鹿迎接，它看起来有些慌张。驯鹿带你到一个放着护目镜和安全帽的架子前（你很快找到了合适的尺寸），然后带你进入设施的更深处。在某个地方，你经过一个按钮，上面有一个模糊的鼻子印记和"按此求助"的标签。难怪你会被那么快地装进投石机里！

// 你穿过最后一组被更多警告标志包围的门，进入一个房间，这里一定是收集外部所有光线的地方。当你欣赏着可用于进一步聚焦光线的各种透镜时，驯鹿给你带来了一本名为"初始化手册"的书。

// "你好！"，这本书愉快地开始了，显然没有意识到正在你肩膀后面读书的那只担心的驯鹿。"这个程序将让你启动熔岩生产设施 - 而且不会烧毁或熔化任何不该烧毁或熔化的东西！"

// "在开始之前，请准备好使用假日ASCII字符串助手算法（附录1A）。"你翻到附录1A。驯鹿兴趣盎然地靠得更近了。

// HASH算法是一种将任何字符串转换为0到255范围内的单个数字的方法。要在字符串上运行HASH算法，从当前值0开始。然后，对于字符串中的每个字符，从开头开始：

// 确定字符串当前字符的ASCII码。
// 将当前值增加你刚刚确定的ASCII码。
// 将当前值设置为自身乘以17。
// 将当前值设置为自身除以256的余数。
// 按顺序对字符串中的每个字符执行这些步骤后，当前值就是HASH算法的输出。

// 所以，要找到在字符串HASH上运行HASH算法的结果：

// 当前值从0开始。
// 第一个字符是H；它的ASCII码是72。
// 当前值增加到72。
// 当前值乘以17变成1224。
// 当前值变成200（1224除以256的余数）。
// 下一个字符是A；它的ASCII码是65。
// 当前值增加到265。
// 当前值乘以17变成4505。
// 当前值变成153（4505除以256的余数）。
// 下一个字符是S；它的ASCII码是83。
// 当前值增加到236。
// 当前值乘以17变成4012。
// 当前值变成172（4012除以256的余数）。
// 下一个字符是H；它的ASCII码是72。
// 当前值增加到244。
// 当前值乘以17变成4148。
// 当前值变成52（4148除以256的余数）。
// 所以，在字符串HASH上运行HASH算法的结果是52。

// 初始化序列（你的谜题输入）是一个用逗号分隔的步骤列表，用于启动熔岩生产设施。解析初始化序列时忽略换行符。为了验证你的HASH算法是否正常工作，这本书提供了对初始化序列中的每个步骤运行HASH算法的结果之和。

// 例如：

// rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7
// 这个初始化序列指定了11个单独的步骤；对每个步骤运行HASH算法的结果如下：

// rn=1 变成 30。
// cm- 变成 253。
// qp=3 变成 97。
// cm=2 变成 47。
// qp- 变成 14。
// pc=4 变成 180。
// ot=9 变成 9。
// ab=5 变成 197。
// pc- 变成 48。
// pc=6 变成 214。
// ot=7 变成 231。
// 在这个例子中，这些结果的总和是1320。不幸的是，驯鹿偷走了包含预期验证数字的页面，目前正兴奋地在设施里跑来跑去。

// 对初始化序列中的每个步骤运行HASH算法。结果的总和是多少？（初始化序列是一行长字符串；复制粘贴时要小心。）
function HASH(str) {
    let currentValue = 0;
    for (let char of str) {
        currentValue += char.charCodeAt(0);
        currentValue *= 17;
        currentValue %= 256;
    }
    console.log(currentValue)
    return currentValue;
}

function sumHASHResults(sequence) {
    const steps = sequence.trim().split(',');
    return steps.reduce((sum, step) => sum + HASH(step), 0);
}

// Test with the example
const exampleSequence = 'rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7';
console.log('Example sum:', sumHASHResults(exampleSequence));

// Read the input file and calculate the sum
// const fs = require('fs');
// const input = fs.readFileSync('input.txt', 'utf8');
// console.log('Puzzle input sum:', sumHASHResults(input));

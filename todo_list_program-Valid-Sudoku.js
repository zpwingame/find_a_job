/**
 * @param {character[][]} board
 * @return {boolean}
 */
function isValidSudoku(board) {
    // Check rows
    for (let i = 0; i < 9; i++) {
        if (!isValidUnit(board[i])) {
            return false;
        }
    }

    // Check columns
    for (let j = 0; j < 9; j++) {
        const column = [];
        for (let i = 0; i < 9; i++) {
            column.push(board[i][j]);
        }
        if (!isValidUnit(column)) {
            return false;
        }
    }

    // Check 3x3 sub-boxes
    for (let boxRow = 0; boxRow < 3; boxRow++) {
        for (let boxCol = 0; boxCol < 3; boxCol++) {
            const box = [];
            for (let i = boxRow * 3; i < boxRow * 3 + 3; i++) {
                for (let j = boxCol * 3; j < boxCol * 3 + 3; j++) {
                    box.push(board[i][j]);
                }
            }
            if (!isValidUnit(box)) {
                return false;
            }
        }
    }

    return true;
}

function isValidUnit(unit) {
    const seen = new Set();
    for (let num of unit) {
        if (num !== '.') {
            if (seen.has(num)) {
                return false;
            }
            seen.add(num);
        }
    }
    return true;
}

// Test cases
const board1 = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
];
console.log(isValidSudoku(board1)); // Output: true

const board2 = [
    ["8","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
];
console.log(isValidSudoku(board2)); // Output: false

// 有效的数独
// 有效的数独（Valid Sudoku）问题解析：

// 1. 问题描述：
// 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
// - 数字 1-9 在每一行只能出现一次。
// - 数字 1-9 在每一列只能出现一次。
// - 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

// 2. 解题思路：
// - 分别检查每一行、每一列和每个 3x3 的子方格。
// - 使用集合（Set）来检查是否有重复数字。
// - 对于每个单元（行、列或子方格），创建一个新的集合，遍历其中的数字。
// - 如果遇到非 '.' 的数字，检查是否已经在集合中。如果是，则返回 false；否则，将其添加到集合中。

// 3. 时间复杂度：
// - 需要遍历整个 9x9 的棋盘三次（行、列、子方格）
// - 总体时间复杂度为 O(1)，因为输入大小是固定的

// 4. 空间复杂度：
// - 使用了固定大小的集合来存储数字
// - 空间复杂度为 O(1)

// 5. 注意事项：
// - 需要注意处理空白格子（用 '.' 表示）
// - 只需验证已填入的数字，不需要解决数独问题
// - 3x3 子方格的遍历需要特别注意索引的计算

// 6. 优化方向：
// - 可以使用位运算来代替集合，进一步优化空间使用
// - 可以在一次遍历中同时检查行、列和子方格，减少遍历次数

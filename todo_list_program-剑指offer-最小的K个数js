/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number[]}
 */
function getLeastNumbers(arr, k) {
    if (k === 0 || arr.length === 0) {
        return [];
    }
    
    // Use QuickSelect algorithm
    return quickSelect(arr, 0, arr.length - 1, k - 1);
}

function quickSelect(arr, left, right, k) {
    let pivot = partition(arr, left, right);
    
    if (pivot === k) {
        return arr.slice(0, k + 1);
    } else if (pivot < k) {
        return quickSelect(arr, pivot + 1, right, k);
    } else {
        return quickSelect(arr, left, pivot - 1, k);
    }
}

function partition(arr, left, right) {
    let pivot = arr[right];
    let i = left - 1;
    
    for (let j = left; j < right; j++) {
        if (arr[j] <= pivot) {
            i++;
            [arr[i], arr[j]] = [arr[j], arr[i]];
        }
    }
    
    [arr[i + 1], arr[right]] = [arr[right], arr[i + 1]];
    return i + 1;
}

// Test cases
console.log(getLeastNumbers([3,2,1], 2)); // Expected output: [1,2]
console.log(getLeastNumbers([0,1,2,1], 1)); // Expected output: [0]
console.log(getLeastNumbers([0,0,0,2,0,5], 0)); // Expected output: []

// 题目：最小的k个数
// 输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。

// 解题思路：
// 1. 使用快速选择（QuickSelect）算法，这是一种基于快速排序的选择算法
// 2. 平均时间复杂度为 O(n)，最坏情况下为 O(n^2)，但实际上很少发生
// 3. 空间复杂度为 O(1)，因为是原地操作数组

// 算法步骤：
// 1. 如果 k 为 0 或数组为空，返回空数组
// 2. 使用 quickSelect 函数递归地选择第 k 小的元素
// 3. 在 quickSelect 中，使用 partition 函数将数组分为两部分
// 4. 如果 pivot 索引等于 k-1，我们找到了前 k 个最小的数
// 5. 如果 pivot 索引小于 k-1，在右半部分继续查找
// 6. 如果 pivot 索引大于 k-1，在左半部分继续查找
// 7. 最后返回数组的前 k 个元素

// 注意：这个解法会修改原数组。如果不允许修改原数组，可以考虑使用堆（优先队列）来解决，
// 或者在开始时复制一份数组。
